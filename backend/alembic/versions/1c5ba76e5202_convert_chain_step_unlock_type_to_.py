"""convert_chain_step_unlock_type_to_string_enum

Revision ID: 1c5ba76e5202
Revises: f8587d96fe1b
Create Date: 2025-07-29 21:57:24.068294

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '1c5ba76e5202'
down_revision: Union[str, None] = 'f8587d96fe1b'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # Convert unlock type enum from integers to strings
    # First create new enum with string values
    op.execute("CREATE TYPE unlocktype_new AS ENUM ('GPS', 'VIDEO', 'IMAGE', 'MARKDOWN', 'QUIZ', 'PASSWORD', 'URL')")
    
    # Update existing data to convert integer values to string equivalents
    op.execute("""
        UPDATE chain_steps 
        SET unlock_type = CASE 
            WHEN unlock_type::int = 0 THEN 'GPS'
            WHEN unlock_type::int = 1 THEN 'VIDEO'
            WHEN unlock_type::int = 2 THEN 'IMAGE'
            WHEN unlock_type::int = 3 THEN 'MARKDOWN'
            WHEN unlock_type::int = 4 THEN 'QUIZ'
            WHEN unlock_type::int = 5 THEN 'PASSWORD'
            WHEN unlock_type::int = 6 THEN 'URL'
            ELSE 'GPS'
        END::text
    """)
    
    # Drop old enum and rename new one
    op.execute("ALTER TABLE chain_steps ALTER COLUMN unlock_type TYPE unlocktype_new USING unlock_type::text::unlocktype_new")
    op.execute("DROP TYPE unlocktype")
    op.execute("ALTER TYPE unlocktype_new RENAME TO unlocktype")


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    pass
    # ### end Alembic commands ###
